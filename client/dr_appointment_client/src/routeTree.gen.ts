/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AppointmentsRouteImport } from './routes/appointments'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DoctorDoctorRouteImport } from './routes/doctor/doctor'
import { Route as DoctorIdRouteImport } from './routes/doctor/$id'

const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AppointmentsRoute = AppointmentsRouteImport.update({
  id: '/appointments',
  path: '/appointments',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DoctorDoctorRoute = DoctorDoctorRouteImport.update({
  id: '/doctor/doctor',
  path: '/doctor/doctor',
  getParentRoute: () => rootRouteImport,
} as any)
const DoctorIdRoute = DoctorIdRouteImport.update({
  id: '/doctor/$id',
  path: '/doctor/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/appointments': typeof AppointmentsRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/doctor/$id': typeof DoctorIdRoute
  '/doctor/doctor': typeof DoctorDoctorRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/appointments': typeof AppointmentsRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/doctor/$id': typeof DoctorIdRoute
  '/doctor/doctor': typeof DoctorDoctorRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/appointments': typeof AppointmentsRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/doctor/$id': typeof DoctorIdRoute
  '/doctor/doctor': typeof DoctorDoctorRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/appointments'
    | '/login'
    | '/profile'
    | '/doctor/$id'
    | '/doctor/doctor'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/appointments'
    | '/login'
    | '/profile'
    | '/doctor/$id'
    | '/doctor/doctor'
  id:
    | '__root__'
    | '/'
    | '/appointments'
    | '/login'
    | '/profile'
    | '/doctor/$id'
    | '/doctor/doctor'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppointmentsRoute: typeof AppointmentsRoute
  LoginRoute: typeof LoginRoute
  ProfileRoute: typeof ProfileRoute
  DoctorIdRoute: typeof DoctorIdRoute
  DoctorDoctorRoute: typeof DoctorDoctorRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/appointments': {
      id: '/appointments'
      path: '/appointments'
      fullPath: '/appointments'
      preLoaderRoute: typeof AppointmentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/doctor/doctor': {
      id: '/doctor/doctor'
      path: '/doctor/doctor'
      fullPath: '/doctor/doctor'
      preLoaderRoute: typeof DoctorDoctorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/doctor/$id': {
      id: '/doctor/$id'
      path: '/doctor/$id'
      fullPath: '/doctor/$id'
      preLoaderRoute: typeof DoctorIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppointmentsRoute: AppointmentsRoute,
  LoginRoute: LoginRoute,
  ProfileRoute: ProfileRoute,
  DoctorIdRoute: DoctorIdRoute,
  DoctorDoctorRoute: DoctorDoctorRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
